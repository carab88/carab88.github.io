<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>curry and rice and beer ! - misc</title><link href="https://carab88.github.io/" rel="alternate"></link><link href="https://carab88.github.io/feeds/misc.atom.xml" rel="self"></link><id>https://carab88.github.io/</id><updated>2020-05-22T00:00:00+09:00</updated><entry><title>Google検索結果を自動要約する何かを作ろうとしたらのに、気づいたら Raspberry Pi Zero v1.3と遊んでいた件</title><link href="https://carab88.github.io/googlejian-suo-jie-guo-wozi-dong-yao-yue-suruhe-kawozuo-routoshitaranoni-qi-duitara-raspberry-pi-zero-v13toyou-ndeitajian.html" rel="alternate"></link><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><author><name>carab88</name></author><id>tag:carab88.github.io,2020-05-22:/googlejian-suo-jie-guo-wozi-dong-yao-yue-suruhe-kawozuo-routoshitaranoni-qi-duitara-raspberry-pi-zero-v13toyou-ndeitajian.html</id><summary type="html">&lt;h1&gt;Google検索結果を自動要約する何かを作ろうとしたらのに、気づいたら Raspberry Pi Zero v1.3と遊んでいた件&lt;/h1&gt;
&lt;p&gt;Raspberry Pi Zero v1.3 はフリスクサイズの小さなコンピュータ。
WifiやEthernetが付いていない。本体とケースがともに660円。&lt;br&gt;
&lt;img alt="RPZの写真" src=".\aaa.png"&gt;&lt;/p&gt;
&lt;h2&gt;きっかけ&lt;/h2&gt;
&lt;p&gt;何かのキーワードを調べるとき私は、
- 検索エンジンでキーワードを検索
- 検索結果１件目をぽちっと押して見る
- 検索結果２件目をぽちっと押して見る
- (省略)
- 検索結果５件目をぽちっと押して見る
- だいたいこんな意味なのかなと納得する&lt;/p&gt;
&lt;p&gt;という手順でやっているけど、ぽちぽちページを開いたり、文章を読んだりするのが面倒。そもそも私は文章を読むのは好きではない。「機械学習で自動要約できるのでは」と思いついた。&lt;/p&gt;
&lt;h2&gt;やろうとしたころ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;キーワードを受け取る&lt;/li&gt;
&lt;li&gt;Google検索をする&lt;/li&gt;
&lt;li&gt;検索結果上位３件をスクレイピング&lt;/li&gt;
&lt;li&gt;名詞を抽出&lt;/li&gt;
&lt;li&gt;自然言語処理（Word2Vec）で近しい言葉を集める&lt;/li&gt;
&lt;li&gt;それを何とか文章にする&lt;/li&gt;
&lt;li&gt;結果を渡す&lt;/li&gt;
&lt;li&gt;これをAzureか何かのクラウドに乗っける&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やってしまったこと&lt;/h2&gt;
&lt;p&gt;クラウドに乗っけたら知らない人がアクセスするんじゃないか。Basic認証かけて中身をみられていなくても、アクセスされるのはなんか気味悪い。でもどこからでも使いたいからIPアドレス制限もしたくない。という元SEのくせに変な悪い被害妄想してしまい、クラウド案は却下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi ZeroをWin10から操作する …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Google検索結果を自動要約する何かを作ろうとしたらのに、気づいたら Raspberry Pi Zero v1.3と遊んでいた件&lt;/h1&gt;
&lt;p&gt;Raspberry Pi Zero v1.3 はフリスクサイズの小さなコンピュータ。
WifiやEthernetが付いていない。本体とケースがともに660円。&lt;br&gt;
&lt;img alt="RPZの写真" src=".\aaa.png"&gt;&lt;/p&gt;
&lt;h2&gt;きっかけ&lt;/h2&gt;
&lt;p&gt;何かのキーワードを調べるとき私は、
- 検索エンジンでキーワードを検索
- 検索結果１件目をぽちっと押して見る
- 検索結果２件目をぽちっと押して見る
- (省略)
- 検索結果５件目をぽちっと押して見る
- だいたいこんな意味なのかなと納得する&lt;/p&gt;
&lt;p&gt;という手順でやっているけど、ぽちぽちページを開いたり、文章を読んだりするのが面倒。そもそも私は文章を読むのは好きではない。「機械学習で自動要約できるのでは」と思いついた。&lt;/p&gt;
&lt;h2&gt;やろうとしたころ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;キーワードを受け取る&lt;/li&gt;
&lt;li&gt;Google検索をする&lt;/li&gt;
&lt;li&gt;検索結果上位３件をスクレイピング&lt;/li&gt;
&lt;li&gt;名詞を抽出&lt;/li&gt;
&lt;li&gt;自然言語処理（Word2Vec）で近しい言葉を集める&lt;/li&gt;
&lt;li&gt;それを何とか文章にする&lt;/li&gt;
&lt;li&gt;結果を渡す&lt;/li&gt;
&lt;li&gt;これをAzureか何かのクラウドに乗っける&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やってしまったこと&lt;/h2&gt;
&lt;p&gt;クラウドに乗っけたら知らない人がアクセスするんじゃないか。Basic認証かけて中身をみられていなくても、アクセスされるのはなんか気味悪い。でもどこからでも使いたいからIPアドレス制限もしたくない。という元SEのくせに変な悪い被害妄想してしまい、クラウド案は却下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi ZeroをWin10から操作する&lt;ul&gt;
&lt;li&gt;MicroSDカード、ケーブルを探す&lt;/li&gt;
&lt;li&gt;Win10からSSH接続するための設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WEBサーバでPythonのプログラムを動かす&lt;br&gt;
～Apacheとmod_wsgiを組み合わせ、Pythonのbottleを使ったWEBアプリを動かす&lt;ul&gt;
&lt;li&gt;形態素解析に使う辞書(NEologd)を8Gのラズパイに入れる  &lt;ul&gt;
&lt;li&gt;NEologDの&lt;a href="https://github.com/neologd/mecab-ipadic-neologd/blob/master/README.ja.md"&gt;README&lt;/a&gt;そのまま実施    &lt;/li&gt;
&lt;li&gt;メモリが足りず失敗するため一時的にswap領域を2Gに増やし、インストール後は500MBに戻す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pythonプログラム作り&lt;ul&gt;
&lt;li&gt;仮想環境（venv)上に必要なモジュールをインストール&lt;/li&gt;
&lt;li&gt;キーワードを受け取る&lt;/li&gt;
&lt;li&gt;指定キーワードについて、Google検索結果上位５件のURLをもらう&lt;/li&gt;
&lt;li&gt;上位５件のURLに対してスクレイピング（PDFは除く）&lt;/li&gt;
&lt;li&gt;名詞と形容詞を抽出&lt;/li&gt;
&lt;li&gt;話題に含まれる単語をクラスタに分けする(LDAを使う)&lt;/li&gt;
&lt;li&gt;結果を渡す&lt;/li&gt;
&lt;li&gt;開発環境（bottleに梱包のWEBサーバ）で動かしてみる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apacheの設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Androidスマホにらスパイを接続してWEBアプリにアクセスする&lt;ul&gt;
&lt;li&gt;モバイルバッテリーを探す&lt;/li&gt;
&lt;li&gt;USBテザリング、IPアドレスの配布状況を確認&lt;/li&gt;
&lt;li&gt;ラズパイに固定IPを設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;完成系&lt;/h3&gt;
&lt;p&gt;こんな感じ&lt;br&gt;
&lt;img alt="完成系の写真" src=".\bbb.png"&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>話題に含まれる単語をクラスタに分けする(LDA を使う)</title><link href="https://carab88.github.io/hua-ti-nihan-marerudan-yu-wokurasutanifen-kesurulda-woshi-u.html" rel="alternate"></link><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><author><name>carab88</name></author><id>tag:carab88.github.io,2020-05-22:/hua-ti-nihan-marerudan-yu-wokurasutanifen-kesurulda-woshi-u.html</id><summary type="html">&lt;h1&gt;話題に含まれる単語をクラスタに分けする(LDA を使う)&lt;/h1&gt;
&lt;p&gt;肝心の自然言語はいい加減だからだんだん不安&lt;/p&gt;
&lt;h2&gt;やっていること&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;単語・単語出現回数を持つデータを持つ辞書を作る&lt;/li&gt;
&lt;li&gt;出現頻度を持つデータ（コーパス）を作る&lt;/li&gt;
&lt;li&gt;TF-IDFを使って単語の重要度を抽出&lt;/li&gt;
&lt;li&gt;LDAを使い話題を１０個のクラスタ分け、単語を１５個ずつ抽出する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```python:utils.py&lt;/p&gt;
&lt;h1&gt;抜粋&lt;/h1&gt;
&lt;p&gt;from collections import OrderedDict
from gensim.corpora import Dictionary
from gensim.models.doc2vec import TaggedDocument
from gensim import models
import numpy as np&lt;/p&gt;
&lt;p&gt;def classify_contents(text_tokenized):
    dictionary = Dictionary(text_tokenized)
    corpus = [dictionary.doc2bow(word …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;話題に含まれる単語をクラスタに分けする(LDA を使う)&lt;/h1&gt;
&lt;p&gt;肝心の自然言語はいい加減だからだんだん不安&lt;/p&gt;
&lt;h2&gt;やっていること&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;単語・単語出現回数を持つデータを持つ辞書を作る&lt;/li&gt;
&lt;li&gt;出現頻度を持つデータ（コーパス）を作る&lt;/li&gt;
&lt;li&gt;TF-IDFを使って単語の重要度を抽出&lt;/li&gt;
&lt;li&gt;LDAを使い話題を１０個のクラスタ分け、単語を１５個ずつ抽出する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```python:utils.py&lt;/p&gt;
&lt;h1&gt;抜粋&lt;/h1&gt;
&lt;p&gt;from collections import OrderedDict
from gensim.corpora import Dictionary
from gensim.models.doc2vec import TaggedDocument
from gensim import models
import numpy as np&lt;/p&gt;
&lt;p&gt;def classify_contents(text_tokenized):
    dictionary = Dictionary(text_tokenized)
    corpus = [dictionary.doc2bow(word) for word in text_tokenized]
    tfidf = models.TfidfModel(corpus,normalize  = False)
    corpus_tfidf = tfidf[corpus]
    lda = models.ldamodel.LdaModel(corpus=corpus_tfidf, num_topics=10, \
                                id2word=dictionary, \
                                iterations=1000, alpha = 0.5 ,eta=0.5,\
                                random_state =1,passes=5,chunksize=100,dtype=np.float64)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;topics = lda.show_topics(num_words = 15 ,formatted = False)&lt;/span&gt;
&lt;span class="err"&gt;return topics&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>今後書きたいネタ</title><link href="https://carab88.github.io/jin-hou-shu-kitaineta.html" rel="alternate"></link><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><author><name>carab88</name></author><id>tag:carab88.github.io,2020-05-22:/jin-hou-shu-kitaineta.html</id><content type="html">&lt;h1&gt;今後書きたいネタ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SoftEtherとOpenVPNを使って自宅マシンに外からアクセス&lt;/li&gt;
&lt;li&gt;ユーザ権限でも実現するシャットダウンスクリプト&lt;/li&gt;
&lt;li&gt;VSphereでGPUをゲストOSに割り当てた（が１年間使っていない）&lt;/li&gt;
&lt;li&gt;送る&lt;/li&gt;
&lt;li&gt;スタート&lt;/li&gt;
&lt;li&gt;centosをルータにしてしまった&lt;/li&gt;
&lt;li&gt;Wifiを…&lt;/li&gt;
&lt;li&gt;一般人もElasticSearchを使いたい&lt;/li&gt;
&lt;li&gt;UVC（USB Video Class）に対応した HDMIからUSBに変換するアダプターが欲しい&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>キーワードを受け取る</title><link href="https://carab88.github.io/kiwadowoshou-kequ-ru.html" rel="alternate"></link><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><author><name>carab88</name></author><id>tag:carab88.github.io,2020-05-22:/kiwadowoshou-kequ-ru.html</id><summary type="html">&lt;p&gt;Title: キーワードを受け取る
Date: 2020-05-22 00:00&lt;/p&gt;
&lt;h1&gt;キーワードを受け取る&lt;/h1&gt;
&lt;h2&gt;キーワードを渡す&lt;/h2&gt;
&lt;p&gt;WEB屋さんの経験なく、GET/POSTはあまり興味ないので、とりあえずGETでキーワードを渡す。&lt;br&gt;
スマホで使いやすいようにフォントサイズは大きめの
フォームを用意。CSSベタ打ちです。すみません。&lt;/p&gt;
&lt;p&gt;```html:index.html
&amp;lt;!DOCTYPE html&amp;gt;
&lt;html lang="jp"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;yykapi&lt;/title&gt;
  &lt;/head&gt;
  &lt;meta name="viewport" content="width=device-width" /&gt;
  &lt;style type="text/css"&gt;
    input[type="text"] {
      font-size: 160%;
      width: 77%;
      margin: 5% 0% 0% 2%;
      padding: 1% 0%;
      vertical-align: center;
    }
    input[type="submit"] {
      font-size: 160%;
      width: 17%;
      margin: 5% 0% 2 …&lt;/style&gt;&lt;/html&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Title: キーワードを受け取る
Date: 2020-05-22 00:00&lt;/p&gt;
&lt;h1&gt;キーワードを受け取る&lt;/h1&gt;
&lt;h2&gt;キーワードを渡す&lt;/h2&gt;
&lt;p&gt;WEB屋さんの経験なく、GET/POSTはあまり興味ないので、とりあえずGETでキーワードを渡す。&lt;br&gt;
スマホで使いやすいようにフォントサイズは大きめの
フォームを用意。CSSベタ打ちです。すみません。&lt;/p&gt;
&lt;p&gt;```html:index.html
&amp;lt;!DOCTYPE html&amp;gt;
&lt;html lang="jp"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;yykapi&lt;/title&gt;
  &lt;/head&gt;
  &lt;meta name="viewport" content="width=device-width" /&gt;
  &lt;style type="text/css"&gt;
    input[type="text"] {
      font-size: 160%;
      width: 77%;
      margin: 5% 0% 0% 2%;
      padding: 1% 0%;
      vertical-align: center;
    }
    input[type="submit"] {
      font-size: 160%;
      width: 17%;
      margin: 5% 0% 2% 0%;
      vertical-align: center;
      padding: 0% 0%;
    }
  &lt;/style&gt;
  &lt;body&gt;
    &lt;form name="form" method="GET" action="/yyk"&gt;
      &lt;input type="text" name="q" placeholder="YYKしたい言葉を入力" required /&gt;
      &lt;input type="submit" value="よー" /&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;## キーワードを受け取る&lt;/span&gt;
&lt;span class="err"&gt;bottleを使って受け取る場合の記述例&lt;/span&gt;
&lt;span class="err"&gt;```Python3:route.py&lt;/span&gt;
&lt;span class="err"&gt;# (略)&lt;/span&gt;
&lt;span class="err"&gt;@get(&amp;#39;/yyk&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;def yyk_result():&lt;/span&gt;
&lt;span class="err"&gt;    req_param = {}&lt;/span&gt;
&lt;span class="err"&gt;    q = request.params.q&lt;/span&gt;
&lt;span class="err"&gt;# (略)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;フォームが送信されると、/yyk にリダイレクトされ、ここの処理で、フォームの&lt;code&gt;name="q"&lt;/code&gt;に入った値を受け取る。&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>名詞と形容詞を抽出</title><link href="https://carab88.github.io/ming-ci-toxing-rong-ci-wochou-chu.html" rel="alternate"></link><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><author><name>carab88</name></author><id>tag:carab88.github.io,2020-05-22:/ming-ci-toxing-rong-ci-wochou-chu.html</id><summary type="html">&lt;h1&gt;名詞と形容詞を抽出&lt;/h1&gt;
&lt;h2&gt;やっていること&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mecabを使った形態素解析&lt;/li&gt;
&lt;li&gt;辞書はNEologDを指定&lt;/li&gt;
&lt;li&gt;pタグのテキストは、改行でひとつの文章の区切りとして扱う&lt;/li&gt;
&lt;li&gt;ひとつの文章毎、リスト（配列）に入れる&lt;/li&gt;
&lt;li&gt;力技で名詞と形容詞を抽出して、単語をリストに詰め込む&lt;/li&gt;
&lt;li&gt;文章毎の単語を、次に返却する用のリストに入れる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```python:utils.py&lt;/p&gt;
&lt;h1&gt;抜粋&lt;/h1&gt;
&lt;p&gt;import MeCab&lt;/p&gt;
&lt;p&gt;def getWordList(text):
    text_list = []
    text_list = text.split("\n")
    # 短い文章無視
    text_list = [[s] for s in text_list if len(s)&amp;gt;20 ]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mecab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeCab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-d /usr/lib/arm-linux-gnueabihf/mecab/dic/mecab-ipadic-neologd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;contents …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;名詞と形容詞を抽出&lt;/h1&gt;
&lt;h2&gt;やっていること&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mecabを使った形態素解析&lt;/li&gt;
&lt;li&gt;辞書はNEologDを指定&lt;/li&gt;
&lt;li&gt;pタグのテキストは、改行でひとつの文章の区切りとして扱う&lt;/li&gt;
&lt;li&gt;ひとつの文章毎、リスト（配列）に入れる&lt;/li&gt;
&lt;li&gt;力技で名詞と形容詞を抽出して、単語をリストに詰め込む&lt;/li&gt;
&lt;li&gt;文章毎の単語を、次に返却する用のリストに入れる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```python:utils.py&lt;/p&gt;
&lt;h1&gt;抜粋&lt;/h1&gt;
&lt;p&gt;import MeCab&lt;/p&gt;
&lt;p&gt;def getWordList(text):
    text_list = []
    text_list = text.split("\n")
    # 短い文章無視
    text_list = [[s] for s in text_list if len(s)&amp;gt;20 ]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mecab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeCab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-d /usr/lib/arm-linux-gnueabihf/mecab/dic/mecab-ipadic-neologd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;text_wakachi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;text_tokenized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;words_all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;text_tokenized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;改行でひとつの文章の区切りとして扱う&lt;/span&gt;
    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;ひとつの文章毎、リスト（配列）に入れる&lt;/span&gt;
    &lt;span class="n"&gt;text_wakachi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mecab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text_wakachi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;力技で名詞と形容詞を抽出して、単語をリストに詰め込む&lt;/span&gt;
        &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;EOS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ー&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;and&lt;/span&gt;
                &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;名詞&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;形容詞&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;数&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt;
                &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;さん&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;こと&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ため&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;これ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;もの&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;よう&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;文章毎の単語を、次に返却する用のリストに入れる&lt;/span&gt;
    &lt;span class="n"&gt;text_tokenized&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text_tokenized&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Raspberry Pi ZeroをWin10から操作する</title><link href="https://carab88.github.io/raspberry-pi-zerowowin10karacao-zuo-suru.html" rel="alternate"></link><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><author><name>carab88</name></author><id>tag:carab88.github.io,2020-05-22:/raspberry-pi-zerowowin10karacao-zuo-suru.html</id><summary type="html">&lt;h1&gt;Raspberry Pi ZeroをWin10から操作する&lt;/h1&gt;
&lt;p&gt;やってみたのメモ&lt;/p&gt;
&lt;h2&gt;MicroSDカード、ケーブルを探す&lt;/h2&gt;
&lt;p&gt;Raspberry Pi ZeroをWin10から操作するために必要なもの
- コネクタ形状【USB A（オス）】 ― 【USB Micro-B（オス）】 でデータ転送ができるケーブル&lt;br&gt;
前職が出張多かった関係でケーブルが探すといくつか出てきた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;microSDカード&lt;br&gt;
家の中を探して見つかったのは容量8G&lt;br&gt;
NEologD辞書を入れるとぎりぎりの容量&lt;br&gt;
写真家じゃないので64Gとか持っていない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Win10からSSH接続するための設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Raspbian LiteのイメージファイルをSDカードに書き込み  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USB On-the-Go Ethernet モードで起動させるための設定&lt;br&gt;
SDカード（boot）直下のファイルを修正、配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config.txtの追記&lt;br&gt;
&lt;code&gt;config.txt&lt;/code&gt;最終行に&lt;code&gt;dtoverlay=dwc2&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;commandline.txtの修正&lt;br&gt;
&lt;code&gt;rootwait&lt;/code&gt;の後に &lt;code&gt;modules-load=dwc2,g_ether&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;空のsshファイルの作成 …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Raspberry Pi ZeroをWin10から操作する&lt;/h1&gt;
&lt;p&gt;やってみたのメモ&lt;/p&gt;
&lt;h2&gt;MicroSDカード、ケーブルを探す&lt;/h2&gt;
&lt;p&gt;Raspberry Pi ZeroをWin10から操作するために必要なもの
- コネクタ形状【USB A（オス）】 ― 【USB Micro-B（オス）】 でデータ転送ができるケーブル&lt;br&gt;
前職が出張多かった関係でケーブルが探すといくつか出てきた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;microSDカード&lt;br&gt;
家の中を探して見つかったのは容量8G&lt;br&gt;
NEologD辞書を入れるとぎりぎりの容量&lt;br&gt;
写真家じゃないので64Gとか持っていない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Win10からSSH接続するための設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Raspbian LiteのイメージファイルをSDカードに書き込み  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USB On-the-Go Ethernet モードで起動させるための設定&lt;br&gt;
SDカード（boot）直下のファイルを修正、配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config.txtの追記&lt;br&gt;
&lt;code&gt;config.txt&lt;/code&gt;最終行に&lt;code&gt;dtoverlay=dwc2&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;commandline.txtの修正&lt;br&gt;
&lt;code&gt;rootwait&lt;/code&gt;の後に &lt;code&gt;modules-load=dwc2,g_ether&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;空のsshファイルの作成&lt;br&gt;
 ファイル名が&lt;code&gt;ssh&lt;/code&gt;である空ファイル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RaspberryPiをPCと接続&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;USBポートをPCと接続（PWR INではない）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ネットワークアダプタとして認識させる  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドライバ の入手&lt;br&gt;
&lt;a href="https://caron.ws/wp-content/uploads/telechargement/RPI%20Driver%20OTG.zip"&gt;RPI Driver OTG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ドライバの手動設定&lt;br&gt;
デバイスマネージャから「ポート（COMとLPT）」→ 「USBシリアルデバイス(COM10)」を選択して、ドライバソフトウェアを手動選択  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;インターネット接続の共有&lt;br&gt;
  PCのインターネット接続を共有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;RaspberryPiにPCからSSHで接続&lt;br&gt;
初期状態は、 ユーザー名:&lt;code&gt;pi&lt;/code&gt; パスワード: &lt;code&gt;raspberry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;br&gt;
&lt;a href="https://qiita.com/Liesegang/items/dcdc669f80d1bf721c21"&gt;USB OTGを使ったRapsberry Pi Zero WH のセットアップ - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;その他初期設定&lt;/h2&gt;
&lt;p&gt;（ubuntuマシンと同じことをすればよいので割愛）&lt;/p&gt;
&lt;h2&gt;-&lt;/h2&gt;</content><category term="misc"></category></entry><entry><title>上位５件の URL に対してスクレイピング</title><link href="https://carab88.github.io/shang-wei-5jian-no-url-nidui-shitesukureipingu.html" rel="alternate"></link><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><author><name>carab88</name></author><id>tag:carab88.github.io,2020-05-22:/shang-wei-5jian-no-url-nidui-shitesukureipingu.html</id><summary type="html">&lt;h1&gt;上位５件の URL に対してスクレイピング&lt;/h1&gt;
&lt;p&gt;やっていること
- requestsでWEBページをにアクセス
- ユーザエージェントを指定&lt;br&gt;
ブラウザからアクセスしたとみなすため
- pdfは処理をスキップする
- HTMLの抽出はBeautifulSoupを使う
- pタグを抽出
- １秒以上の間隔を持たせるため、待機時間を挿入&lt;/p&gt;
&lt;p&gt;```python:utils.py&lt;/p&gt;
&lt;h1&gt;抜粋&lt;/h1&gt;
&lt;p&gt;import requests
import time
from bs4 import BeautifulSoup&lt;/p&gt;
&lt;p&gt;def getPages(urls):
　　# UAの指定
    ua = "Mozilla/5.0 (Windows NT 10.0; Win64; x64)" \
    "AppleWebKit/537.36 (KHTML, like Gecko) " \
    "Chrome/81.0.4044.129 Safari …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;上位５件の URL に対してスクレイピング&lt;/h1&gt;
&lt;p&gt;やっていること
- requestsでWEBページをにアクセス
- ユーザエージェントを指定&lt;br&gt;
ブラウザからアクセスしたとみなすため
- pdfは処理をスキップする
- HTMLの抽出はBeautifulSoupを使う
- pタグを抽出
- １秒以上の間隔を持たせるため、待機時間を挿入&lt;/p&gt;
&lt;p&gt;```python:utils.py&lt;/p&gt;
&lt;h1&gt;抜粋&lt;/h1&gt;
&lt;p&gt;import requests
import time
from bs4 import BeautifulSoup&lt;/p&gt;
&lt;p&gt;def getPages(urls):
　　# UAの指定
    ua = "Mozilla/5.0 (Windows NT 10.0; Win64; x64)" \
    "AppleWebKit/537.36 (KHTML, like Gecko) " \
    "Chrome/81.0.4044.129 Safari/537.36"
    text = ""
    for i in range(getnum):
        if not urls[i].endswith('pdf'):
            try:
                s = requests.get(urls[i], headers={"User-Agent": ua})
            except:
                pass
            soup = BeautifulSoup(s.content, 'html.parser')
            p_tag_text = ""
            # 全てのpタグを抽出
            for j in soup.find_all("p"):
                p_tag_text = p_tag_text + j.text + "\n"
            text = text + p_tag_text
            time.sleep(1)
    return text
```&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>指定キーワードについて、Google 検索結果上位５件の URL をもらう</title><link href="https://carab88.github.io/zhi-ding-kiwadonitsuite-google-jian-suo-jie-guo-shang-wei-5jian-no-url-womorau.html" rel="alternate"></link><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><author><name>carab88</name></author><id>tag:carab88.github.io,2020-05-22:/zhi-ding-kiwadonitsuite-google-jian-suo-jie-guo-shang-wei-5jian-no-url-womorau.html</id><summary type="html">&lt;h1&gt;指定キーワードについて、Google 検索結果上位５件の URL をもらう&lt;/h1&gt;
&lt;h2&gt;Google Custom Search API の設定&lt;/h2&gt;
&lt;p&gt;Google 検索結果をスクレイピングしていたら「あんたロボットでしょ」と結果を見せてくれなくなったので、API を使う。&lt;br&gt;
やったことは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Cloud Platform の API を使うためのキーを取得&lt;/li&gt;
&lt;li&gt;検索結果を取得する Custom Search API を有効化&lt;/li&gt;
&lt;li&gt;検索条件を指定できる　 Custom Search Engine の設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下記を参考に設定&lt;br&gt;
&lt;a href="https://qiita.com/zak_y/items/42ca0f1ea14f7046108c"&gt;Custom Search API を使って Google 検索結果を取得する - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;URLの取得&lt;/h2&gt;
&lt;p&gt;自分しか見ないしまぁいいかなと思い、ソースコードにKEYとIDを直打ち&lt;/p&gt;
&lt;p&gt;```python:utils.py&lt;/p&gt;
&lt;h1&gt;抜粋&lt;/h1&gt;
&lt;p&gt;from googleapiclient …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;指定キーワードについて、Google 検索結果上位５件の URL をもらう&lt;/h1&gt;
&lt;h2&gt;Google Custom Search API の設定&lt;/h2&gt;
&lt;p&gt;Google 検索結果をスクレイピングしていたら「あんたロボットでしょ」と結果を見せてくれなくなったので、API を使う。&lt;br&gt;
やったことは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Cloud Platform の API を使うためのキーを取得&lt;/li&gt;
&lt;li&gt;検索結果を取得する Custom Search API を有効化&lt;/li&gt;
&lt;li&gt;検索条件を指定できる　 Custom Search Engine の設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下記を参考に設定&lt;br&gt;
&lt;a href="https://qiita.com/zak_y/items/42ca0f1ea14f7046108c"&gt;Custom Search API を使って Google 検索結果を取得する - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;URLの取得&lt;/h2&gt;
&lt;p&gt;自分しか見ないしまぁいいかなと思い、ソースコードにKEYとIDを直打ち&lt;/p&gt;
&lt;p&gt;```python:utils.py&lt;/p&gt;
&lt;h1&gt;抜粋&lt;/h1&gt;
&lt;p&gt;from googleapiclient.discovery import build&lt;/p&gt;
&lt;h1&gt;取得したAPIKeyとCustom Search EngineのIDをそれぞれ設定&lt;/h1&gt;
&lt;p&gt;GOOGLE_API_KEY          = "&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;****"
CUSTOM_SEARCH_ENGINE_ID = "000000000000000000000:XXXXXXXXXXX"&lt;/p&gt;
&lt;h1&gt;上位5件を取得&lt;/h1&gt;
&lt;p&gt;getnum = 5&lt;/p&gt;
&lt;p&gt;def getUrls(keyword):
    service = build("customsearch", "v1", developerKey=GOOGLE_API_KEY)
    result = service.cse().list(q=keyword,cx=CUSTOM_SEARCH_ENGINE_ID, \
            num=getnum).execute()
    urls = []
    if result:
        for i in range(getnum):
            #URLのみをリストに追加
            urls.append(result['items'][i]['link'])&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;return urls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```&lt;/p&gt;</content><category term="misc"></category></entry></feed>